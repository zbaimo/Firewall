# ===================================================================
# Nginx智能防火墙系统 - 部署配置
# 用于生产环境部署
# ===================================================================

services:
  # ===================================================================
  # 防火墙主服务
  # ===================================================================
  firewall:
    # 使用Docker Hub上的镜像（自动拉取最新版本）
    image: zbaimo/nginx-firewall:latest
    
    # 或使用固定版本（生产环境推荐）
    # image: zbaimo/nginx-firewall:v1.0.0
    
    container_name: nginx-firewall
    restart: always  # 自动重启
    
    # ===================================================================
    # 网络配置 - 使用主机网络模式（可以操作iptables）
    # ===================================================================
    
    network_mode: "host"
    
    # 注意: 使用host网络时，容器直接使用主机网络
    # 服务将在主机的8080端口监听
    # 访问: http://主机IP:8080
    
    # ===================================================================
    # 数据卷挂载
    # ===================================================================
    
    volumes:
      # 配置文件（只读）- 必需
      - ./config.yaml:/app/config.yaml:ro
      
      # Nginx日志目录（只读）- 必需
      - /root/data/Nginx:/var/log/nginx:ro
      
      # 数据持久化（必需）
      - firewall-data:/data
      
      # 导出文件目录（推荐）
      - ./exports:/app/exports
      
      # 日志文件目录（推荐，包含审计日志）
      - ./logs:/app/logs
      
      # GeoIP数据库（可选，如果启用地理位置功能）
      # 下载地址: https://dev.maxmind.com/geoip/geoip2/geolite2/
      # - ./GeoLite2-City.mmdb:/app/GeoLite2-City.mmdb:ro
    
    # ===================================================================
    # 环境变量
    # ===================================================================
    
    environment:
      # 时区设置
      - TZ=Asia/Shanghai
      
      # Redis配置（使用localhost因为使用host网络）
      - REDIS_HOST=localhost
      - REDIS_PORT=6379
    
    # ===================================================================
    # 权限配置（用于操作防火墙）
    # ===================================================================
    
    # Linux环境需要特权模式来操作iptables
    privileged: true
    
    cap_add:
      - NET_ADMIN  # 网络管理权限
      - NET_RAW    # 原始套接字权限
    
    # ===================================================================
    # 资源限制（可选，防止资源耗尽）
    # ===================================================================
    
    deploy:
      resources:
        limits:
          cpus: '2.0'      # 最多使用2核CPU
          memory: 1G       # 最多使用1GB内存
        reservations:
          cpus: '0.5'      # 预留0.5核CPU
          memory: 256M     # 预留256MB内存
    
    # ===================================================================
    # 健康检查
    # ===================================================================
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/system/health"]
      interval: 30s      # 每30秒检查一次
      timeout: 10s       # 超时时间
      retries: 3         # 重试次数
      start_period: 40s  # 启动后等待40秒再开始检查
    
    # ===================================================================
    # 日志配置
    # ===================================================================
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"    # 单个日志文件最大10MB
        max-file: "3"      # 保留3个日志文件
    
    # ===================================================================
    # 依赖服务
    # ===================================================================
    
    depends_on:
      redis:
        condition: service_healthy

  # ===================================================================
  # Redis缓存服务（性能优化）
  # ===================================================================
  redis:
    image: redis:7-alpine
    container_name: firewall-redis
    restart: always
    
    # 使用主机网络模式（与防火墙服务在同一网络）
    network_mode: "host"
    
    # Redis配置命令
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --bind 127.0.0.1
    
    # 数据持久化
    volumes:
      - redis-data:/data
    
    # 健康检查
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

# ===================================================================
# 数据卷定义
# ===================================================================

volumes:
  # 防火墙数据（数据库、配置等）
  firewall-data:
    driver: local
  
  # Redis数据
  redis-data:
    driver: local

# 注意: 使用host网络模式时不需要自定义网络配置

# ===================================================================
# 使用说明
# ===================================================================
#
# 启动服务:
#   docker-compose -f docker-compose.deploy.yml up -d
#
# 查看日志:
#   docker-compose -f docker-compose.deploy.yml logs -f
#
# 停止服务:
#   docker-compose -f docker-compose.deploy.yml down
#
# 更新镜像:
#   docker-compose -f docker-compose.deploy.yml pull
#   docker-compose -f docker-compose.deploy.yml up -d
#
# 访问Web界面:
#   http://localhost:8080
#   默认账户: admin / admin（首次登录强制修改密码）
#
# ===================================================================

